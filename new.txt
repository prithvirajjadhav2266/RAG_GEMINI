# ereâ€™s how to add the workflow for uploading a Word file, running the embedding script, and reloading the FAISS index and metadata in your Flask app:

# 1. Add a file upload form to your HTML.
# 2. Add a new route to handle file uploads.
# 3. Call your embedding script after upload.
# 4. Reload the FAISS index and metadata.
# Below is the code to add to your app.py:
# import os
# import subprocess
# from werkzeug.utils import secure_filename

# UPLOAD_FOLDER = 'uploads'
# ALLOWED_EXTENSIONS = {'docx'}

# if not os.path.exists(UPLOAD_FOLDER):
#     os.makedirs(UPLOAD_FOLDER)

# app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# def allowed_file(filename):
#     return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# def reload_faiss():
#     global index, meta
#     print("[DEBUG] Reloading FAISS index and metadata...")
#     index = faiss.read_index(FAISS_PATH)
#     with open(META_PATH, 'rb') as f:
#         meta = pickle.load(f)
#     print(f"[DEBUG] Reloaded {len(meta)} chunks from metadata.")

# @app.route('/upload', methods=['GET', 'POST'])
# def upload_file():
#     message = ""
#     if request.method == 'POST':
#         if 'file' not in request.files:
#             message = "No file part"
#         else:
#             file = request.files['file']
#             if file.filename == '':
#                 message = "No selected file"
#             elif file and allowed_file(file.filename):
#                 filename = secure_filename(file.filename)
#                 filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
#                 file.save(filepath)
#                 # Run embedding script
#                 subprocess.run(['python', 'embed_word_to_faiss.py', filepath], check=True)
#                 reload_faiss()
#                 message = "File processed and embeddings updated!"
#             else:
#                 message = "Invalid file type. Only .docx allowed."
#     return render_template_string("""
#     <!doctype html>
#     <title>Upload Word File</title>
#     <h2>Upload a Word (.docx) file to update the RAG database</h2>
#     <form method=post enctype=multipart/form-data>
#       <input type=file name=file>
#       <input type=submit value=Upload>
#     </form>
#     <p>{{ message }}</p>
#     <a href="/">Back to QA</a>
#     """, message=message)



# 5. Update your embed_word_to_faiss.py to accept a file path argument:
# Change the main block to:

# if __name__ == '__main__':
#     import sys
#     docx_file = sys.argv[1] if len(sys.argv) > 1 else 'AetherX Dynamics.docx'
#     chunks = extract_headings_and_chunks(docx_file)
#     embed_and_store(chunks)
    
# 6. Add a link to the upload page in your main HTML (optional):
# Add this line in your HTML template, e.g. under the heading:
    
#     <a href="/upload" class="btn btn-secondary mb-3">Upload new Word file</a>
    

# Now you can:

# Go to /upload to upload a new Word file.
# The app will process it, update the FAISS index, and you can immediately ask questions on the new content.
# Let me know if you want this as a patch or need any adjustments!